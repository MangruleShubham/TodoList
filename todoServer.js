/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  
  const express = require('express');
  const fs=require('fs');
  const bodyParser = require('body-parser');
const { dirname } = require('path');
  
  const app = express();
  app.use(bodyParser.json());
  const path="todos.json";

  app.get('/todos',(req,resp)=>{
    fs.readFile(path,"utf8",(err,data)=>
    {
      if(err)
      throw err
      
      resp.status(200).json(JSON.parse(data));
    });
  });


  app.get('/todos/:id',(req,resp)=>
  {
    const id=req.params.id;
    let index=-1;
    fs.readFile(path,"utf8",(err,data)=>{
      if(err)throw err;
      const todos=JSON.parse(data);
      for(let i=0;i<todos.length;i++)
      {
        if(todos[i].id==id)
        {
          index=i;
          break;
        }
      }
      if(index==-1)
      {
        resp.status(404).send();
      }
      else
      {
        resp.json(todos[index]);
      }
    });

  });

  app.post("/todos", (req,resp)=>
  {
    const newData={
      id:Math.floor(Math.random()*100000),
      title:req.body.title,
      Description:req.body.Description      

    };
       fs.readFile(path,'utf8',(err,data)=>
       {
        if(err)throw err;
        const todo=JSON.parse(data);       
        todo.push(newData);
        // const updatedData=JSON.stringify(todo);
         fs.writeFile(path,JSON.stringify(todo),(err)=>
         {
          if(err)throw err;
           resp.status(201).json(newData);
         });
       });   
  });
  

  app.put("/todos/:id",(req,resp)=>
  {
    const id=req.params.id;
    fs.readFile(path,"utf8",(err,data)=>
    {
      if(err)throw err;
      const todos=JSON.parse(data);
      let index=-1;
      for(let i=0;i<todos.length;i++)
      {

        if(todos[i].id==id)
        {
          todos[i].id=req.body.id;
          todos[i].title=req.body.title;
          todos[i].description=req.body.description;
          index=i;
          break;
        }

      }
      if(index==-1)
      {
        resp.status(404).send()
      }
      else
      {
        fs.writeFile(path,JSON.stringify(todos),(err)=>
        {
          if(err)throw err;
          resp.status(200).json(todos[index]);
        });
      }
      
    });
  });

  app.delete('/todos/:id',(req,resp)=>{
    const id=req.params.id;
    fs.readFile(path,"utf8",(err,data)=>
    {
         if(err)throw err;
         const todos=JSON.parse(data);
         let index=-1;
         let newTodo=[];
         for(let i=0;i<todos.length;i++)
         {
            if(todos[i].id==id)
            {
              index=i;
            }
            else
            {
                 newTodo.push(todos[i]);
            }
         }
         if(index==-1)
         {
            resp.status(404).send();
         }
         else
         {
          fs.writeFile(path,JSON.stringify(newTodo),(err)=>
          {
            if(err)
            {
              throw err;
            }
            else
            {
              resp.status(200).send();
            }
          });
         }
    });
  });
app.get("/",(req,resp)=>
{
  resp.sendFile(path.join(__dirname,"index.html"));
})
  // app.use(req,res,next)
  // {
  //   res.status(404).send();
  // }
  // module.exports = app;